// Generated by gencpp from file autopilot_bridge/WeatherData.msg
// DO NOT EDIT!


#ifndef AUTOPILOT_BRIDGE_MESSAGE_WEATHERDATA_H
#define AUTOPILOT_BRIDGE_MESSAGE_WEATHERDATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace autopilot_bridge
{
template <class ContainerAllocator>
struct WeatherData_
{
  typedef WeatherData_<ContainerAllocator> Type;

  WeatherData_()
    : baro_millibars(0.0)
    , temp_C(0.0)
    , wind_mph(0.0)
    , wind_direction(0.0)  {
    }
  WeatherData_(const ContainerAllocator& _alloc)
    : baro_millibars(0.0)
    , temp_C(0.0)
    , wind_mph(0.0)
    , wind_direction(0.0)  {
  (void)_alloc;
    }



   typedef float _baro_millibars_type;
  _baro_millibars_type baro_millibars;

   typedef float _temp_C_type;
  _temp_C_type temp_C;

   typedef float _wind_mph_type;
  _wind_mph_type wind_mph;

   typedef float _wind_direction_type;
  _wind_direction_type wind_direction;





  typedef boost::shared_ptr< ::autopilot_bridge::WeatherData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::autopilot_bridge::WeatherData_<ContainerAllocator> const> ConstPtr;

}; // struct WeatherData_

typedef ::autopilot_bridge::WeatherData_<std::allocator<void> > WeatherData;

typedef boost::shared_ptr< ::autopilot_bridge::WeatherData > WeatherDataPtr;
typedef boost::shared_ptr< ::autopilot_bridge::WeatherData const> WeatherDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::autopilot_bridge::WeatherData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::autopilot_bridge::WeatherData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::autopilot_bridge::WeatherData_<ContainerAllocator1> & lhs, const ::autopilot_bridge::WeatherData_<ContainerAllocator2> & rhs)
{
  return lhs.baro_millibars == rhs.baro_millibars &&
    lhs.temp_C == rhs.temp_C &&
    lhs.wind_mph == rhs.wind_mph &&
    lhs.wind_direction == rhs.wind_direction;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::autopilot_bridge::WeatherData_<ContainerAllocator1> & lhs, const ::autopilot_bridge::WeatherData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace autopilot_bridge

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::autopilot_bridge::WeatherData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::autopilot_bridge::WeatherData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::autopilot_bridge::WeatherData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::autopilot_bridge::WeatherData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autopilot_bridge::WeatherData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autopilot_bridge::WeatherData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::autopilot_bridge::WeatherData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ad6ecb730008621b85e84342a94f123f";
  }

  static const char* value(const ::autopilot_bridge::WeatherData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xad6ecb730008621bULL;
  static const uint64_t static_value2 = 0x85e84342a94f123fULL;
};

template<class ContainerAllocator>
struct DataType< ::autopilot_bridge::WeatherData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "autopilot_bridge/WeatherData";
  }

  static const char* value(const ::autopilot_bridge::WeatherData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::autopilot_bridge::WeatherData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 baro_millibars\n"
"float32 temp_C\n"
"float32 wind_mph\n"
"float32 wind_direction\n"
;
  }

  static const char* value(const ::autopilot_bridge::WeatherData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::autopilot_bridge::WeatherData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.baro_millibars);
      stream.next(m.temp_C);
      stream.next(m.wind_mph);
      stream.next(m.wind_direction);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WeatherData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::autopilot_bridge::WeatherData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::autopilot_bridge::WeatherData_<ContainerAllocator>& v)
  {
    s << indent << "baro_millibars: ";
    Printer<float>::stream(s, indent + "  ", v.baro_millibars);
    s << indent << "temp_C: ";
    Printer<float>::stream(s, indent + "  ", v.temp_C);
    s << indent << "wind_mph: ";
    Printer<float>::stream(s, indent + "  ", v.wind_mph);
    s << indent << "wind_direction: ";
    Printer<float>::stream(s, indent + "  ", v.wind_direction);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AUTOPILOT_BRIDGE_MESSAGE_WEATHERDATA_H
