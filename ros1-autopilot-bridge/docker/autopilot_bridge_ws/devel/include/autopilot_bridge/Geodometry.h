// Generated by gencpp from file autopilot_bridge/Geodometry.msg
// DO NOT EDIT!


#ifndef AUTOPILOT_BRIDGE_MESSAGE_GEODOMETRY_H
#define AUTOPILOT_BRIDGE_MESSAGE_GEODOMETRY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <autopilot_bridge/GeoPoseWithCovariance.h>
#include <geometry_msgs/TwistWithCovariance.h>

namespace autopilot_bridge
{
template <class ContainerAllocator>
struct Geodometry_
{
  typedef Geodometry_<ContainerAllocator> Type;

  Geodometry_()
    : header()
    , child_frame_id()
    , pose()
    , twist()  {
    }
  Geodometry_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , child_frame_id(_alloc)
    , pose(_alloc)
    , twist(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _child_frame_id_type;
  _child_frame_id_type child_frame_id;

   typedef  ::autopilot_bridge::GeoPoseWithCovariance_<ContainerAllocator>  _pose_type;
  _pose_type pose;

   typedef  ::geometry_msgs::TwistWithCovariance_<ContainerAllocator>  _twist_type;
  _twist_type twist;





  typedef boost::shared_ptr< ::autopilot_bridge::Geodometry_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::autopilot_bridge::Geodometry_<ContainerAllocator> const> ConstPtr;

}; // struct Geodometry_

typedef ::autopilot_bridge::Geodometry_<std::allocator<void> > Geodometry;

typedef boost::shared_ptr< ::autopilot_bridge::Geodometry > GeodometryPtr;
typedef boost::shared_ptr< ::autopilot_bridge::Geodometry const> GeodometryConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::autopilot_bridge::Geodometry_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::autopilot_bridge::Geodometry_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::autopilot_bridge::Geodometry_<ContainerAllocator1> & lhs, const ::autopilot_bridge::Geodometry_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.child_frame_id == rhs.child_frame_id &&
    lhs.pose == rhs.pose &&
    lhs.twist == rhs.twist;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::autopilot_bridge::Geodometry_<ContainerAllocator1> & lhs, const ::autopilot_bridge::Geodometry_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace autopilot_bridge

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::autopilot_bridge::Geodometry_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::autopilot_bridge::Geodometry_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::autopilot_bridge::Geodometry_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::autopilot_bridge::Geodometry_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autopilot_bridge::Geodometry_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autopilot_bridge::Geodometry_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::autopilot_bridge::Geodometry_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c60666fcf444559dd9fd297eb9e60431";
  }

  static const char* value(const ::autopilot_bridge::Geodometry_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc60666fcf444559dULL;
  static const uint64_t static_value2 = 0xd9fd297eb9e60431ULL;
};

template<class ContainerAllocator>
struct DataType< ::autopilot_bridge::Geodometry_<ContainerAllocator> >
{
  static const char* value()
  {
    return "autopilot_bridge/Geodometry";
  }

  static const char* value(const ::autopilot_bridge::Geodometry_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::autopilot_bridge::Geodometry_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Odometry message but with GeoPoseWithCovariance instead\n"
"\n"
"std_msgs/Header header\n"
"string child_frame_id\n"
"GeoPoseWithCovariance pose\n"
"geometry_msgs/TwistWithCovariance twist\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: autopilot_bridge/GeoPoseWithCovariance\n"
"# Pose using lat/lon/alt in place of x/y/z plus two altitude fields\n"
"GeoPose pose\n"
"\n"
"# Row-major representation of the 6x6 covariance matrix\n"
"# The orientation parameters use a fixed-axis representation.\n"
"# In order, the parameters are:\n"
"# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n"
"float64[36] covariance\n"
"\n"
"================================================================================\n"
"MSG: autopilot_bridge/GeoPose\n"
"# 3-D point using lat/lon/alt, with two altitude options\n"
"GeoPoint position\n"
"\n"
"# Quaternion orientation\n"
"geometry_msgs/Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: autopilot_bridge/GeoPoint\n"
"# WGS84 latitude, longitude, and MSL altitude\n"
"float64 lat\n"
"float64 lon\n"
"float64 alt\n"
"\n"
"# Relative altitude (custom definable, but generally set w.r.t. some home point)\n"
"float64 rel_alt\n"
"\n"
"# Flag field for which altitudes are valid\n"
"bool using_alt\n"
"bool using_rel_alt\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/TwistWithCovariance\n"
"# This expresses velocity in free space with uncertainty.\n"
"\n"
"Twist twist\n"
"\n"
"# Row-major representation of the 6x6 covariance matrix\n"
"# The orientation parameters use a fixed-axis representation.\n"
"# In order, the parameters are:\n"
"# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n"
"float64[36] covariance\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Twist\n"
"# This expresses velocity in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::autopilot_bridge::Geodometry_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::autopilot_bridge::Geodometry_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.child_frame_id);
      stream.next(m.pose);
      stream.next(m.twist);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Geodometry_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::autopilot_bridge::Geodometry_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::autopilot_bridge::Geodometry_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "child_frame_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.child_frame_id);
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::autopilot_bridge::GeoPoseWithCovariance_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "twist: ";
    s << std::endl;
    Printer< ::geometry_msgs::TwistWithCovariance_<ContainerAllocator> >::stream(s, indent + "  ", v.twist);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AUTOPILOT_BRIDGE_MESSAGE_GEODOMETRY_H
