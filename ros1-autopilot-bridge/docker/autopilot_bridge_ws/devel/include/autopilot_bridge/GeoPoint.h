// Generated by gencpp from file autopilot_bridge/GeoPoint.msg
// DO NOT EDIT!


#ifndef AUTOPILOT_BRIDGE_MESSAGE_GEOPOINT_H
#define AUTOPILOT_BRIDGE_MESSAGE_GEOPOINT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace autopilot_bridge
{
template <class ContainerAllocator>
struct GeoPoint_
{
  typedef GeoPoint_<ContainerAllocator> Type;

  GeoPoint_()
    : lat(0.0)
    , lon(0.0)
    , alt(0.0)
    , rel_alt(0.0)
    , using_alt(false)
    , using_rel_alt(false)  {
    }
  GeoPoint_(const ContainerAllocator& _alloc)
    : lat(0.0)
    , lon(0.0)
    , alt(0.0)
    , rel_alt(0.0)
    , using_alt(false)
    , using_rel_alt(false)  {
  (void)_alloc;
    }



   typedef double _lat_type;
  _lat_type lat;

   typedef double _lon_type;
  _lon_type lon;

   typedef double _alt_type;
  _alt_type alt;

   typedef double _rel_alt_type;
  _rel_alt_type rel_alt;

   typedef uint8_t _using_alt_type;
  _using_alt_type using_alt;

   typedef uint8_t _using_rel_alt_type;
  _using_rel_alt_type using_rel_alt;





  typedef boost::shared_ptr< ::autopilot_bridge::GeoPoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::autopilot_bridge::GeoPoint_<ContainerAllocator> const> ConstPtr;

}; // struct GeoPoint_

typedef ::autopilot_bridge::GeoPoint_<std::allocator<void> > GeoPoint;

typedef boost::shared_ptr< ::autopilot_bridge::GeoPoint > GeoPointPtr;
typedef boost::shared_ptr< ::autopilot_bridge::GeoPoint const> GeoPointConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::autopilot_bridge::GeoPoint_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::autopilot_bridge::GeoPoint_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::autopilot_bridge::GeoPoint_<ContainerAllocator1> & lhs, const ::autopilot_bridge::GeoPoint_<ContainerAllocator2> & rhs)
{
  return lhs.lat == rhs.lat &&
    lhs.lon == rhs.lon &&
    lhs.alt == rhs.alt &&
    lhs.rel_alt == rhs.rel_alt &&
    lhs.using_alt == rhs.using_alt &&
    lhs.using_rel_alt == rhs.using_rel_alt;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::autopilot_bridge::GeoPoint_<ContainerAllocator1> & lhs, const ::autopilot_bridge::GeoPoint_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace autopilot_bridge

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::autopilot_bridge::GeoPoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::autopilot_bridge::GeoPoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::autopilot_bridge::GeoPoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::autopilot_bridge::GeoPoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autopilot_bridge::GeoPoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autopilot_bridge::GeoPoint_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::autopilot_bridge::GeoPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c121d48ffba7006a7ab486f309ebbbb8";
  }

  static const char* value(const ::autopilot_bridge::GeoPoint_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc121d48ffba7006aULL;
  static const uint64_t static_value2 = 0x7ab486f309ebbbb8ULL;
};

template<class ContainerAllocator>
struct DataType< ::autopilot_bridge::GeoPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "autopilot_bridge/GeoPoint";
  }

  static const char* value(const ::autopilot_bridge::GeoPoint_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::autopilot_bridge::GeoPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# WGS84 latitude, longitude, and MSL altitude\n"
"float64 lat\n"
"float64 lon\n"
"float64 alt\n"
"\n"
"# Relative altitude (custom definable, but generally set w.r.t. some home point)\n"
"float64 rel_alt\n"
"\n"
"# Flag field for which altitudes are valid\n"
"bool using_alt\n"
"bool using_rel_alt\n"
;
  }

  static const char* value(const ::autopilot_bridge::GeoPoint_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::autopilot_bridge::GeoPoint_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.lat);
      stream.next(m.lon);
      stream.next(m.alt);
      stream.next(m.rel_alt);
      stream.next(m.using_alt);
      stream.next(m.using_rel_alt);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GeoPoint_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::autopilot_bridge::GeoPoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::autopilot_bridge::GeoPoint_<ContainerAllocator>& v)
  {
    s << indent << "lat: ";
    Printer<double>::stream(s, indent + "  ", v.lat);
    s << indent << "lon: ";
    Printer<double>::stream(s, indent + "  ", v.lon);
    s << indent << "alt: ";
    Printer<double>::stream(s, indent + "  ", v.alt);
    s << indent << "rel_alt: ";
    Printer<double>::stream(s, indent + "  ", v.rel_alt);
    s << indent << "using_alt: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.using_alt);
    s << indent << "using_rel_alt: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.using_rel_alt);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AUTOPILOT_BRIDGE_MESSAGE_GEOPOINT_H
