// Generated by gencpp from file autopilot_bridge/AutoPilotMsg.msg
// DO NOT EDIT!


#ifndef AUTOPILOT_BRIDGE_MESSAGE_AUTOPILOTMSG_H
#define AUTOPILOT_BRIDGE_MESSAGE_AUTOPILOTMSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace autopilot_bridge
{
template <class ContainerAllocator>
struct AutoPilotMsg_
{
  typedef AutoPilotMsg_<ContainerAllocator> Type;

  AutoPilotMsg_()
    : seq(0)
    , text()  {
    }
  AutoPilotMsg_(const ContainerAllocator& _alloc)
    : seq(0)
    , text(_alloc)  {
  (void)_alloc;
    }



   typedef uint32_t _seq_type;
  _seq_type seq;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _text_type;
  _text_type text;





  typedef boost::shared_ptr< ::autopilot_bridge::AutoPilotMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::autopilot_bridge::AutoPilotMsg_<ContainerAllocator> const> ConstPtr;

}; // struct AutoPilotMsg_

typedef ::autopilot_bridge::AutoPilotMsg_<std::allocator<void> > AutoPilotMsg;

typedef boost::shared_ptr< ::autopilot_bridge::AutoPilotMsg > AutoPilotMsgPtr;
typedef boost::shared_ptr< ::autopilot_bridge::AutoPilotMsg const> AutoPilotMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::autopilot_bridge::AutoPilotMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::autopilot_bridge::AutoPilotMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::autopilot_bridge::AutoPilotMsg_<ContainerAllocator1> & lhs, const ::autopilot_bridge::AutoPilotMsg_<ContainerAllocator2> & rhs)
{
  return lhs.seq == rhs.seq &&
    lhs.text == rhs.text;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::autopilot_bridge::AutoPilotMsg_<ContainerAllocator1> & lhs, const ::autopilot_bridge::AutoPilotMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace autopilot_bridge

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::autopilot_bridge::AutoPilotMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::autopilot_bridge::AutoPilotMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::autopilot_bridge::AutoPilotMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::autopilot_bridge::AutoPilotMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autopilot_bridge::AutoPilotMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autopilot_bridge::AutoPilotMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::autopilot_bridge::AutoPilotMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4a6e7dd37ede14708a8dd0871344bc2a";
  }

  static const char* value(const ::autopilot_bridge::AutoPilotMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4a6e7dd37ede1470ULL;
  static const uint64_t static_value2 = 0x8a8dd0871344bc2aULL;
};

template<class ContainerAllocator>
struct DataType< ::autopilot_bridge::AutoPilotMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "autopilot_bridge/AutoPilotMsg";
  }

  static const char* value(const ::autopilot_bridge::AutoPilotMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::autopilot_bridge::AutoPilotMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32  seq\n"
"string  text\n"
;
  }

  static const char* value(const ::autopilot_bridge::AutoPilotMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::autopilot_bridge::AutoPilotMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.seq);
      stream.next(m.text);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AutoPilotMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::autopilot_bridge::AutoPilotMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::autopilot_bridge::AutoPilotMsg_<ContainerAllocator>& v)
  {
    s << indent << "seq: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.seq);
    s << indent << "text: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.text);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AUTOPILOT_BRIDGE_MESSAGE_AUTOPILOTMSG_H
